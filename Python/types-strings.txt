STRINGS
-------
Operations
----------
Strings indexes start from '0' ( Zero ).
Operations that we can perform on Strings are:
* Indexes ( +ve Indexes )
  -----------------------
  >>> S = 'Spam'      # Make a 4-character string, and assign it to a name
  >>> len(S)          # Length
  4
  >>> S[0]            # The first item in S, indexing by zero-based position
  'S'
  >>> S[1]            # The second item from the left
  'p'
  
  Indexes ( -ve Indexes )
  -----------------------
  >>> S[-1] # The last item from the end in S
  'm'
  >>> S[-2] # The second-to-last item from the end
  'a'
  >>> S[-1] # The last item in S
  'm'
  >>> S[len(S)-1] # Negative indexing, the hard way
  'm'

* slicing  - Extracting the section of the string.
----------
>>> S             # A 4-character string
'Spam'
>>> S[1:3]        # Slice of S from offsets 1 through 2 (not 3)
'pa'
>>> S[1:]         # Everything past the first (1:len(S))
'pam'
>>> S             # S itself hasn't changed
'Spam'
>>> S[0:3]        # Everything but the last
'Spa'
>>> S[:3]         # Same as S[0:3]
'Spa'
>>> S[:-1]        # Everything but the last again, but simpler (0:-1)
'Spa'
>>> S[:]          # All of S as a top-level copy (0:len(S))
'Spam'

* Concatenation
----------------
>>> S
'Spam'
>>> S + 'xyz'     # Concatenation
'Spamxyz'
>>> S             # S is unchanged
'Spam'

Notice that the plus sign (+) means different things for different objects: addition for
numbers, and concatenation for strings. This is a general property of Python that we’ll
call polymorphism.

* Repetition
-------------
>>> S * 8         # Repetition
'SpamSpamSpamSpamSpamSpamSpamSpam'

Immutability
------------
Every string operation is defined to produce a new string as its result, because strings are immutable 
in Python—they cannot be changed in place after they are created.

>>> S
'Spam'
>>> S[0] = 'z'    # Immutable objects cannot be changed
...error text omitted...
TypeError: 'str' object does not support item assignment
>>> S = 'z' + S[1:]   # But we can run expressions to make new objects
>>> S
'zpam'

In terms of the core types:
Immutable    :  numbers, strings, and tuples.
non-Immutable:  lists, dictionaries, and sets are not—they can be changed in place freely.

Methods
-------
FIND
----
>>> S = 'Spam'
>>> S.find('pa') # Find the offset of a substring in S
1
>>> S
'Spam'

REPLACE
-------
>>> S.replace('pa', 'XYZ') # Replace occurrences of a string in S with another
'SXYZm'
>>> S
'Spam'

SPLIT
-----
>>> line = 'aaa,bbb,ccccc,dd'
>>> line.split(',') # Split on a delimiter into a list of substrings
['aaa', 'bbb', 'ccccc', 'dd']

UPPER CASE
----------
>>> S = 'spam'
>>> S.upper() # Upper- and lowercase conversions
'SPAM'

IS ALPHA or NOT
---------------
>>> S.isalpha() # Content tests: isalpha, isdigit, etc.
True

RSTRIP
------
>>> line = 'aaa,bbb,ccccc,dd\n'
>>> line.rstrip() # Remove whitespace characters on the right side
'aaa,bbb,ccccc,dd'
>>> line.rstrip().split(',') # Combine two operations
['aaa', 'bbb', 'ccccc', 'dd']
