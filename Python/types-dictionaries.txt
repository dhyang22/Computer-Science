Introduction
------------
Python dictionaries are something completely different— They are not sequences at all, but are instead known as mappings.
Mappings
--------
Are also collections of other objects, but they store objects by key instead of by relative position.

Note
----
* Like lists, they may be changed in place and can grow and shrink on demand. 
* Also like lists, they are a flexible tool for representing collections, but their more mnemonic keys 
  are better suited when a collection’s items are named or labeled—fields of a database record.
  
Example: {'food': 'Spam', 'quantity': 4, 'color': 'pink'}

Operations
-----------
>>> D = {'food': 'spam', 'quantity': 4, 'color': 'pink'}
>>> D['food']
'spam'
>>>
>>> D['color']
'pink'
>>>
>>> F = {"food": 'spam'}
>>> F["food"]
'spam'
>>>
>>> D['quantity'] += 5
>>> D['quantify']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'quantify'
>>> D['quantity']
9
>>> D
{'food': 'spam', 'color': 'pink', 'quantity': 9}

Defining dictionaries
---------------------
creating dictionaries by assignment
-----------------------------------
>>> D = {}
>>> D['name'] = 'Bob'     # Create keys by assignment
>>> D['job'] = 'dev'
>>> D['age'] = 40
>>> D
{'age': 40, 'job': 'dev', 'name': 'Bob'}
>>> print(D['name'])
Bob

Creating dictionaries by dict
-----------------------------
>>> bob1 = dict(name='Bob', job='dev', age=40) # Keywords
>>> bob1
{'age': 40, 'name': 'Bob', 'job': 'dev'}

>>> bob2 = dict(zip(['name', 'job', 'age'], ['Bob', 'dev', 40])) # Zipping
>>> bob2
{'job': 'dev', 'name': 'Bob', 'age': 40}

Nesting
-------
>>> rec = {'name': {'first': 'Bob', 'last': 'Smith'},
'jobs': ['dev', 'mgr'],
'age': 40.5}

>>> rec
{'age': 40.7, 'jobs': ['dev', 'mgr'], 'name': {'last': 'Smith', 'first': 'Bob'}}

>>> rec['name']                              # 'name' is a nested dictionary
{'last': 'Smith', 'first': 'Bob'}
>>> rec['name']['last']                      # Index the nested dictionary
'Smith'
>>> rec['jobs']                              # 'jobs' is a nested list
['dev', 'mgr']
>>> rec['jobs'][-1]                          # Index the nested list
'mgr'
>>> rec['jobs'].append('janitor')            # Expand Bob's job description in place
>>> rec
{'age': 40.5, 'jobs': ['dev', 'mgr', 'janitor'], 'name': {'last': 'Smith',
'first': 'Bob'}}

Accessing the keys, which does not exist will throw error. so before accessing the key, we can check if that key exist in the 
dictionary or not by using 'in' keyword:

>>> D = {'a': 1, 'b': 2, 'c': 3}
>>> D['f'] # Referencing a nonexistent key is an error
...error text omitted...
KeyError: 'f'
>>> 'f' in D
False

so programatically, we can do like this:

>>> D = {'a': 1,'b': 2, 'c': 3}
>>> 'f' in D
False
>>> if not 'f' in D:
...     print('missing')
...
missing
>>> if 'a' in D:
...     print(D['a']);
...
1
